{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "#NLP Library\n",
    "import spacy\n",
    "import re\n",
    "\n",
    "#Language Detect Library\n",
    "import pycld2 as cld2\n",
    "\n",
    "#Feature extraction, model selection and model training library\n",
    "from sklearn.feature_extraction.text import HashingVectorizer\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "#Libraries to check the model performance\n",
    "from sklearn import metrics\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "#Graphing Libraries\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "import seaborn as snb\n",
    "#from wordcloud import WordCloud, STOPWORDS\n",
    "\n",
    "#Hypothesis Testing\n",
    "import math\n",
    "from scipy.stats import chi2_contingency, chisquare, chi2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>created_at</th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>tweet</th>\n",
       "      <th>likes</th>\n",
       "      <th>retweet_count</th>\n",
       "      <th>source</th>\n",
       "      <th>user_id</th>\n",
       "      <th>user_name</th>\n",
       "      <th>user_screen_name</th>\n",
       "      <th>user_description</th>\n",
       "      <th>...</th>\n",
       "      <th>user_followers_count</th>\n",
       "      <th>user_location</th>\n",
       "      <th>lat</th>\n",
       "      <th>long</th>\n",
       "      <th>city</th>\n",
       "      <th>country</th>\n",
       "      <th>continent</th>\n",
       "      <th>state</th>\n",
       "      <th>state_code</th>\n",
       "      <th>collected_at</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020-10-15 00:00:01</td>\n",
       "      <td>1.316529221557252e+18</td>\n",
       "      <td>#Elecciones2020 | En #Florida: #JoeBiden dice ...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>TweetDeck</td>\n",
       "      <td>360666534.0</td>\n",
       "      <td>El Sol Latino News</td>\n",
       "      <td>elsollatinonews</td>\n",
       "      <td>üåê Noticias de inter√©s para latinos de la costa...</td>\n",
       "      <td>...</td>\n",
       "      <td>1860.0</td>\n",
       "      <td>Philadelphia, PA / Miami, FL</td>\n",
       "      <td>25.77427</td>\n",
       "      <td>-80.19366</td>\n",
       "      <td>NaN</td>\n",
       "      <td>United States of America</td>\n",
       "      <td>North America</td>\n",
       "      <td>Florida</td>\n",
       "      <td>FL</td>\n",
       "      <td>2020-10-21 00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020-10-15 00:00:01</td>\n",
       "      <td>1.3165292227484303e+18</td>\n",
       "      <td>Usa 2020, Trump contro Facebook e Twitter: cop...</td>\n",
       "      <td>26.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>Social Mediaset</td>\n",
       "      <td>331617619.0</td>\n",
       "      <td>Tgcom24</td>\n",
       "      <td>MediasetTgcom24</td>\n",
       "      <td>Profilo ufficiale di Tgcom24: tutte le notizie...</td>\n",
       "      <td>...</td>\n",
       "      <td>1067661.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2020-10-21 00:00:00.373216530</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020-10-15 00:00:02</td>\n",
       "      <td>1.316529228091847e+18</td>\n",
       "      <td>#Trump: As a student I used to hear for years,...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Twitter Web App</td>\n",
       "      <td>8436472.0</td>\n",
       "      <td>snarke</td>\n",
       "      <td>snarke</td>\n",
       "      <td>Will mock for food! Freelance writer, blogger,...</td>\n",
       "      <td>...</td>\n",
       "      <td>1185.0</td>\n",
       "      <td>Portland</td>\n",
       "      <td>45.5202471</td>\n",
       "      <td>-122.6741949</td>\n",
       "      <td>Portland</td>\n",
       "      <td>United States of America</td>\n",
       "      <td>North America</td>\n",
       "      <td>Oregon</td>\n",
       "      <td>OR</td>\n",
       "      <td>2020-10-21 00:00:00.746433060</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2020-10-15 00:00:02</td>\n",
       "      <td>1.316529227471237e+18</td>\n",
       "      <td>2 hours since last tweet from #Trump! Maybe he...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Trumpytweeter</td>\n",
       "      <td>8.28355589206057e+17</td>\n",
       "      <td>Trumpytweeter</td>\n",
       "      <td>trumpytweeter</td>\n",
       "      <td>If he doesn't tweet for some time, should we b...</td>\n",
       "      <td>...</td>\n",
       "      <td>32.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2020-10-21 00:00:01.119649591</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020-10-15 00:00:08</td>\n",
       "      <td>1.3165292523014513e+18</td>\n",
       "      <td>You get a tie! And you get a tie! #Trump ‚Äòs ra...</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Twitter for iPhone</td>\n",
       "      <td>47413798.0</td>\n",
       "      <td>Rana Abtar - ÿ±ŸÜÿß ÿ£ÿ®ÿ™ÿ±</td>\n",
       "      <td>Ranaabtar</td>\n",
       "      <td>Washington Correspondent, Lebanese-American ,c...</td>\n",
       "      <td>...</td>\n",
       "      <td>5393.0</td>\n",
       "      <td>Washington DC</td>\n",
       "      <td>38.8949924</td>\n",
       "      <td>-77.0365581</td>\n",
       "      <td>Washington</td>\n",
       "      <td>United States of America</td>\n",
       "      <td>North America</td>\n",
       "      <td>District of Columbia</td>\n",
       "      <td>DC</td>\n",
       "      <td>2020-10-21 00:00:01.492866121</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows √ó 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            created_at                tweet_id  \\\n",
       "0  2020-10-15 00:00:01   1.316529221557252e+18   \n",
       "1  2020-10-15 00:00:01  1.3165292227484303e+18   \n",
       "2  2020-10-15 00:00:02   1.316529228091847e+18   \n",
       "3  2020-10-15 00:00:02   1.316529227471237e+18   \n",
       "4  2020-10-15 00:00:08  1.3165292523014513e+18   \n",
       "\n",
       "                                               tweet likes  retweet_count  \\\n",
       "0  #Elecciones2020 | En #Florida: #JoeBiden dice ...   0.0            0.0   \n",
       "1  Usa 2020, Trump contro Facebook e Twitter: cop...  26.0            9.0   \n",
       "2  #Trump: As a student I used to hear for years,...   2.0            1.0   \n",
       "3  2 hours since last tweet from #Trump! Maybe he...   0.0            0.0   \n",
       "4  You get a tie! And you get a tie! #Trump ‚Äòs ra...   4.0            3.0   \n",
       "\n",
       "               source               user_id              user_name  \\\n",
       "0           TweetDeck           360666534.0     El Sol Latino News   \n",
       "1    Social Mediaset            331617619.0                Tgcom24   \n",
       "2     Twitter Web App             8436472.0                 snarke   \n",
       "3       Trumpytweeter  8.28355589206057e+17          Trumpytweeter   \n",
       "4  Twitter for iPhone            47413798.0  Rana Abtar - ÿ±ŸÜÿß ÿ£ÿ®ÿ™ÿ±   \n",
       "\n",
       "  user_screen_name                                   user_description  ...  \\\n",
       "0  elsollatinonews  üåê Noticias de inter√©s para latinos de la costa...  ...   \n",
       "1  MediasetTgcom24  Profilo ufficiale di Tgcom24: tutte le notizie...  ...   \n",
       "2           snarke  Will mock for food! Freelance writer, blogger,...  ...   \n",
       "3    trumpytweeter  If he doesn't tweet for some time, should we b...  ...   \n",
       "4        Ranaabtar  Washington Correspondent, Lebanese-American ,c...  ...   \n",
       "\n",
       "  user_followers_count                 user_location         lat  \\\n",
       "0               1860.0  Philadelphia, PA / Miami, FL    25.77427   \n",
       "1            1067661.0                           NaN         NaN   \n",
       "2               1185.0                      Portland  45.5202471   \n",
       "3                 32.0                           NaN         NaN   \n",
       "4               5393.0                 Washington DC  38.8949924   \n",
       "\n",
       "           long        city                   country      continent  \\\n",
       "0     -80.19366         NaN  United States of America  North America   \n",
       "1           NaN         NaN                       NaN            NaN   \n",
       "2  -122.6741949    Portland  United States of America  North America   \n",
       "3           NaN         NaN                       NaN            NaN   \n",
       "4   -77.0365581  Washington  United States of America  North America   \n",
       "\n",
       "                  state state_code                   collected_at  \n",
       "0               Florida         FL            2020-10-21 00:00:00  \n",
       "1                   NaN        NaN  2020-10-21 00:00:00.373216530  \n",
       "2                Oregon         OR  2020-10-21 00:00:00.746433060  \n",
       "3                   NaN        NaN  2020-10-21 00:00:01.119649591  \n",
       "4  District of Columbia         DC  2020-10-21 00:00:01.492866121  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hashtagdonaldtrump = pd.read_csv(\"data/election/hashtag_donaldtrump.csv\", engine='python')\n",
    "hashtagdonaldtrump.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0         2020-10-15 00:00:01\n",
       "1         2020-10-15 00:00:01\n",
       "2         2020-10-15 00:00:02\n",
       "3         2020-10-15 00:00:02\n",
       "4         2020-10-15 00:00:08\n",
       "                 ...         \n",
       "971082    2020-11-08 23:59:43\n",
       "971083    2020-11-08 23:59:48\n",
       "971084    2020-11-08 23:59:53\n",
       "971085    2020-11-08 23:59:54\n",
       "971086    2020-11-08 23:59:55\n",
       "Name: created_at, Length: 971087, dtype: object"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hashtagdonaldtrump['created_at']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "hashtagjoebiden = pd.read_csv(\"data/election/hashtag_joebiden.csv\", engine='python')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>created_at</th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>tweet</th>\n",
       "      <th>likes</th>\n",
       "      <th>retweet_count</th>\n",
       "      <th>source</th>\n",
       "      <th>user_id</th>\n",
       "      <th>user_name</th>\n",
       "      <th>user_screen_name</th>\n",
       "      <th>user_description</th>\n",
       "      <th>...</th>\n",
       "      <th>user_followers_count</th>\n",
       "      <th>user_location</th>\n",
       "      <th>lat</th>\n",
       "      <th>long</th>\n",
       "      <th>city</th>\n",
       "      <th>country</th>\n",
       "      <th>continent</th>\n",
       "      <th>state</th>\n",
       "      <th>state_code</th>\n",
       "      <th>collected_at</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020-10-15 00:00:01</td>\n",
       "      <td>1.316529221557252e+18</td>\n",
       "      <td>#Elecciones2020 | En #Florida: #JoeBiden dice ...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>TweetDeck</td>\n",
       "      <td>360666534.0</td>\n",
       "      <td>El Sol Latino News</td>\n",
       "      <td>elsollatinonews</td>\n",
       "      <td>üåê Noticias de inter√©s para latinos de la costa...</td>\n",
       "      <td>...</td>\n",
       "      <td>1860.0</td>\n",
       "      <td>Philadelphia, PA / Miami, FL</td>\n",
       "      <td>25.77427</td>\n",
       "      <td>-80.19366</td>\n",
       "      <td>NaN</td>\n",
       "      <td>United States of America</td>\n",
       "      <td>North America</td>\n",
       "      <td>Florida</td>\n",
       "      <td>FL</td>\n",
       "      <td>2020-10-21 00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020-10-15 00:00:18</td>\n",
       "      <td>1.31652929585929e+18</td>\n",
       "      <td>#HunterBiden #HunterBidenEmails #JoeBiden #Joe...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Twitter for iPad</td>\n",
       "      <td>809904438.0</td>\n",
       "      <td>Cheri A. üá∫üá∏</td>\n",
       "      <td>Biloximeemaw</td>\n",
       "      <td>Locked and loaded Meemaw. Love God, my family ...</td>\n",
       "      <td>...</td>\n",
       "      <td>6628.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2020-10-21 00:00:00.517827283</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020-10-15 00:00:20</td>\n",
       "      <td>1.3165293050069524e+18</td>\n",
       "      <td>@IslandGirlPRV @BradBeauregardJ @MeidasTouch T...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Twitter Web App</td>\n",
       "      <td>3494182277.0</td>\n",
       "      <td>Flag Waver</td>\n",
       "      <td>Flag_Wavers</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>1536.0</td>\n",
       "      <td>Golden Valley Arizona</td>\n",
       "      <td>46.3040364</td>\n",
       "      <td>-109.17143119999999</td>\n",
       "      <td>NaN</td>\n",
       "      <td>United States of America</td>\n",
       "      <td>North America</td>\n",
       "      <td>Montana</td>\n",
       "      <td>MT</td>\n",
       "      <td>2020-10-21 00:00:01.035654566</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2020-10-15 00:00:21</td>\n",
       "      <td>1.3165293080815575e+18</td>\n",
       "      <td>@chrislongview Watching and setting dvr. Let‚Äôs...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Twitter for iPhone</td>\n",
       "      <td>8.242596012018524e+17</td>\n",
       "      <td>Michelle Ferg</td>\n",
       "      <td>MichelleFerg4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>27.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2020-10-21 00:00:01.553481849</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020-10-15 00:00:22</td>\n",
       "      <td>1.316529312741253e+18</td>\n",
       "      <td>#censorship #HunterBiden #Biden #BidenEmails #...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Twitter Web App</td>\n",
       "      <td>1.032806955356545e+18</td>\n",
       "      <td>the Gold State</td>\n",
       "      <td>theegoldstate</td>\n",
       "      <td>A Silicon Valley #independent #News #Media #St...</td>\n",
       "      <td>...</td>\n",
       "      <td>390.0</td>\n",
       "      <td>California, USA</td>\n",
       "      <td>36.7014631</td>\n",
       "      <td>-118.75599740000001</td>\n",
       "      <td>NaN</td>\n",
       "      <td>United States of America</td>\n",
       "      <td>North America</td>\n",
       "      <td>California</td>\n",
       "      <td>CA</td>\n",
       "      <td>2020-10-21 00:00:02.071309132</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows √ó 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            created_at                tweet_id  \\\n",
       "0  2020-10-15 00:00:01   1.316529221557252e+18   \n",
       "1  2020-10-15 00:00:18    1.31652929585929e+18   \n",
       "2  2020-10-15 00:00:20  1.3165293050069524e+18   \n",
       "3  2020-10-15 00:00:21  1.3165293080815575e+18   \n",
       "4  2020-10-15 00:00:22   1.316529312741253e+18   \n",
       "\n",
       "                                               tweet likes  retweet_count  \\\n",
       "0  #Elecciones2020 | En #Florida: #JoeBiden dice ...   0.0            0.0   \n",
       "1  #HunterBiden #HunterBidenEmails #JoeBiden #Joe...   0.0            0.0   \n",
       "2  @IslandGirlPRV @BradBeauregardJ @MeidasTouch T...   0.0            0.0   \n",
       "3  @chrislongview Watching and setting dvr. Let‚Äôs...   0.0            0.0   \n",
       "4  #censorship #HunterBiden #Biden #BidenEmails #...   1.0            0.0   \n",
       "\n",
       "               source                user_id           user_name  \\\n",
       "0           TweetDeck            360666534.0  El Sol Latino News   \n",
       "1    Twitter for iPad            809904438.0         Cheri A. üá∫üá∏   \n",
       "2     Twitter Web App           3494182277.0          Flag Waver   \n",
       "3  Twitter for iPhone  8.242596012018524e+17       Michelle Ferg   \n",
       "4     Twitter Web App  1.032806955356545e+18      the Gold State   \n",
       "\n",
       "  user_screen_name                                   user_description  ...  \\\n",
       "0  elsollatinonews  üåê Noticias de inter√©s para latinos de la costa...  ...   \n",
       "1     Biloximeemaw  Locked and loaded Meemaw. Love God, my family ...  ...   \n",
       "2      Flag_Wavers                                                NaN  ...   \n",
       "3    MichelleFerg4                                                NaN  ...   \n",
       "4    theegoldstate  A Silicon Valley #independent #News #Media #St...  ...   \n",
       "\n",
       "  user_followers_count                 user_location         lat  \\\n",
       "0               1860.0  Philadelphia, PA / Miami, FL    25.77427   \n",
       "1               6628.0                           NaN         NaN   \n",
       "2               1536.0         Golden Valley Arizona  46.3040364   \n",
       "3                 27.0                           NaN         NaN   \n",
       "4                390.0               California, USA  36.7014631   \n",
       "\n",
       "                  long city                   country      continent  \\\n",
       "0            -80.19366  NaN  United States of America  North America   \n",
       "1                  NaN  NaN                       NaN            NaN   \n",
       "2  -109.17143119999999  NaN  United States of America  North America   \n",
       "3                  NaN  NaN                       NaN            NaN   \n",
       "4  -118.75599740000001  NaN  United States of America  North America   \n",
       "\n",
       "        state state_code                   collected_at  \n",
       "0     Florida         FL            2020-10-21 00:00:00  \n",
       "1         NaN        NaN  2020-10-21 00:00:00.517827283  \n",
       "2     Montana         MT  2020-10-21 00:00:01.035654566  \n",
       "3         NaN        NaN  2020-10-21 00:00:01.553481849  \n",
       "4  California         CA  2020-10-21 00:00:02.071309132  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hashtagjoebiden.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Preparation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "nlp = spacy.load(\"en_core_web_sm\",disable=[\"tagger\",\"parser\",\"ner\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def clean_tweet_text_regex(tweet):\n",
    "    tweet = tweet.lower() # to lower case\n",
    "    tweet = re.sub(r\"@[A-Za-z0-9]+\",\"\", tweet) # Remove @Mentions\n",
    "    tweet = re.sub(r\"#\",\"\", tweet) # remove # \\ART[\\s]+\n",
    "    tweet = re.sub(r\"\\ART[\\s]+\",\"\", tweet) # Remove RT in start\n",
    "    tweet = re.sub(r\"https?:\\/\\/\\S+\",\"\", tweet) # Remove hyperlink\n",
    "    tweet = re.sub(\"(.)\\\\1{2,}\",\"\\\\1\", tweet) # Remove more than one characters.\n",
    "    tweet = re.sub(r\"[^A-Za-z0-9\\s]+\", \"\",str(tweet)) #remove special characters \"!\"\n",
    "    \n",
    "    return tweet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def clean_tweet_spacy_core(doc):\n",
    "    tokens= []\n",
    "\n",
    "    for token in doc:\n",
    "        if token.is_stop:\n",
    "            continue\n",
    "        if token.text != token.lemma_:\n",
    "            tokens.append(token.lemma_)\n",
    "        else:\n",
    "            tokens.append(token.text)\n",
    "      \n",
    "    \n",
    "    tweet=\" \".join(tokens)\n",
    "    return tweet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def doc_to_spans(list_of_texts, join_string=' ||| '):\n",
    "    all_docs = nlp(' ||| '.join(list_of_texts))\n",
    "    split_inds = [i for i, token in enumerate(all_docs) if token.text == '|||'] + [len(all_docs)]\n",
    "    new_docs = [all_docs[(i + 1 if i > 0 else i):j] for i, j in zip([0] + split_inds[:-1], split_inds)]\n",
    "    all_docs = None\n",
    "    return new_docs \n",
    "\n",
    "def get_complete_spans(data,colname):\n",
    "    splitted_frames = np.array_split(data, 500)\n",
    "    docs=[]\n",
    "    i = 1\n",
    "    for frame in splitted_frames:\n",
    "        docs.append(doc_to_spans(frame[colname]))\n",
    "    return docs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def clean_tweet_spacy(data, colname):\n",
    "    docs = get_complete_spans(data, colname)\n",
    "    \n",
    "    print(\"Tweets cleaning started\")\n",
    "    tweets = []\n",
    "    \n",
    "    for doces in docs:\n",
    "        for doc in doces:\n",
    "            tweets.append(clean_tweet_spacy_core(doc))\n",
    "\n",
    "    print(\"Tweets cleanned\")\n",
    "    return tweets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def detect_lang(tweet):\n",
    "    try:\n",
    "        isReliable, textBytesFound, details = cld2.detect(tweet)\n",
    "        return details[0][0]\n",
    "    except:\n",
    "        return \"not found\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "def check_col_null_values(data):\n",
    "    col_null_values = pd.DataFrame(columns=[\"column\",\"nullvalues\"])\n",
    "    null_values = []\n",
    "\n",
    "    for col in data.columns:\n",
    "        sum = data[col].isnull().sum()\n",
    "        print(f\"{col}: null percent: {sum/data.shape[0]*100} null values: {sum}/{data.shape[0]} value count: {data.shape[0] - sum}/{data.shape[0]}\")\n",
    "        null_values.append(sum)\n",
    "    \n",
    "    col_null_values[\"column\"] = data.columns\n",
    "    col_null_values[\"nullvalues\"] = null_values\n",
    "\n",
    "    return col_null_values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['created_at', 'tweet_id', 'tweet', 'likes', 'retweet_count', 'source',\n",
       "       'user_id', 'user_name', 'user_screen_name', 'user_description',\n",
       "       'user_join_date', 'user_followers_count', 'user_location', 'lat',\n",
       "       'long', 'city', 'country', 'continent', 'state', 'state_code',\n",
       "       'collected_at'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hashtagdonaldtrump.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "hashtagdonaldtrump['user_name'].apply(api.get_user).verified"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet</th>\n",
       "      <th>created_at</th>\n",
       "      <th>likes</th>\n",
       "      <th>retweet_count</th>\n",
       "      <th>user_id</th>\n",
       "      <th>user_followers_count</th>\n",
       "      <th>user_location</th>\n",
       "      <th>lat</th>\n",
       "      <th>long</th>\n",
       "      <th>city</th>\n",
       "      <th>country</th>\n",
       "      <th>continent</th>\n",
       "      <th>state</th>\n",
       "      <th>state_code</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>#Elecciones2020 | En #Florida: #JoeBiden dice ...</td>\n",
       "      <td>2020-10-15 00:00:01</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>360666534.0</td>\n",
       "      <td>1860.0</td>\n",
       "      <td>Philadelphia, PA / Miami, FL</td>\n",
       "      <td>25.77427</td>\n",
       "      <td>-80.19366</td>\n",
       "      <td>NaN</td>\n",
       "      <td>United States of America</td>\n",
       "      <td>North America</td>\n",
       "      <td>Florida</td>\n",
       "      <td>FL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Usa 2020, Trump contro Facebook e Twitter: cop...</td>\n",
       "      <td>2020-10-15 00:00:01</td>\n",
       "      <td>26.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>331617619.0</td>\n",
       "      <td>1067661.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>#Trump: As a student I used to hear for years,...</td>\n",
       "      <td>2020-10-15 00:00:02</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>8436472.0</td>\n",
       "      <td>1185.0</td>\n",
       "      <td>Portland</td>\n",
       "      <td>45.5202471</td>\n",
       "      <td>-122.6741949</td>\n",
       "      <td>Portland</td>\n",
       "      <td>United States of America</td>\n",
       "      <td>North America</td>\n",
       "      <td>Oregon</td>\n",
       "      <td>OR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2 hours since last tweet from #Trump! Maybe he...</td>\n",
       "      <td>2020-10-15 00:00:02</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8.28355589206057e+17</td>\n",
       "      <td>32.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>You get a tie! And you get a tie! #Trump ‚Äòs ra...</td>\n",
       "      <td>2020-10-15 00:00:08</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>47413798.0</td>\n",
       "      <td>5393.0</td>\n",
       "      <td>Washington DC</td>\n",
       "      <td>38.8949924</td>\n",
       "      <td>-77.0365581</td>\n",
       "      <td>Washington</td>\n",
       "      <td>United States of America</td>\n",
       "      <td>North America</td>\n",
       "      <td>District of Columbia</td>\n",
       "      <td>DC</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                               tweet           created_at  \\\n",
       "0  #Elecciones2020 | En #Florida: #JoeBiden dice ...  2020-10-15 00:00:01   \n",
       "1  Usa 2020, Trump contro Facebook e Twitter: cop...  2020-10-15 00:00:01   \n",
       "2  #Trump: As a student I used to hear for years,...  2020-10-15 00:00:02   \n",
       "3  2 hours since last tweet from #Trump! Maybe he...  2020-10-15 00:00:02   \n",
       "4  You get a tie! And you get a tie! #Trump ‚Äòs ra...  2020-10-15 00:00:08   \n",
       "\n",
       "  likes  retweet_count               user_id user_followers_count  \\\n",
       "0   0.0            0.0           360666534.0               1860.0   \n",
       "1  26.0            9.0           331617619.0            1067661.0   \n",
       "2   2.0            1.0             8436472.0               1185.0   \n",
       "3   0.0            0.0  8.28355589206057e+17                 32.0   \n",
       "4   4.0            3.0            47413798.0               5393.0   \n",
       "\n",
       "                  user_location         lat          long        city  \\\n",
       "0  Philadelphia, PA / Miami, FL    25.77427     -80.19366         NaN   \n",
       "1                           NaN         NaN           NaN         NaN   \n",
       "2                      Portland  45.5202471  -122.6741949    Portland   \n",
       "3                           NaN         NaN           NaN         NaN   \n",
       "4                 Washington DC  38.8949924   -77.0365581  Washington   \n",
       "\n",
       "                    country      continent                 state state_code  \n",
       "0  United States of America  North America               Florida         FL  \n",
       "1                       NaN            NaN                   NaN        NaN  \n",
       "2  United States of America  North America                Oregon         OR  \n",
       "3                       NaN            NaN                   NaN        NaN  \n",
       "4  United States of America  North America  District of Columbia         DC  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "columns = [\"tweet\", \"created_at\", 'likes', 'retweet_count', 'user_id', \n",
    "           'user_followers_count', 'user_location', 'lat', 'long', \n",
    "           'city', 'country', 'continent', 'state', 'state_code']\n",
    "\n",
    "trump = hashtagdonaldtrump[columns]\n",
    "trump.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tweet: null percent: 0.0014416833919103026 null values: 14/971087 value count: 971073/971087\n",
      "created_at: null percent: 0.0 null values: 0/971087 value count: 971087/971087\n",
      "likes: null percent: 0.004325050175730908 null values: 42/971087 value count: 971045/971087\n",
      "retweet_count: null percent: 0.01585851731101333 null values: 154/971087 value count: 970933/971087\n",
      "user_id: null percent: 0.016270426851559126 null values: 158/971087 value count: 970929/971087\n",
      "user_followers_count: null percent: 0.017506155473196533 null values: 170/971087 value count: 970917/971087\n",
      "user_location: null percent: 30.403867006766642 null values: 295248/971087 value count: 675839/971087\n",
      "lat: null percent: 54.10277348991388 null values: 525385/971087 value count: 445702/971087\n",
      "long: null percent: 54.102464557758466 null values: 525382/971087 value count: 445705/971087\n",
      "city: null percent: 76.60559764470125 null values: 743907/971087 value count: 227180/971087\n",
      "country: null percent: 54.40861632376913 null values: 528355/971087 value count: 442732/971087\n",
      "continent: null percent: 54.406865708221815 null values: 528338/971087 value count: 442749/971087\n",
      "state: null percent: 66.98400864186216 null values: 650473/971087 value count: 320614/971087\n",
      "state_code: null percent: 69.06415182161845 null values: 670673/971087 value count: 300414/971087\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>column</th>\n",
       "      <th>nullvalues</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tweet</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>created_at</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>likes</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>retweet_count</td>\n",
       "      <td>154</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>user_id</td>\n",
       "      <td>158</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>user_followers_count</td>\n",
       "      <td>170</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>user_location</td>\n",
       "      <td>295248</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>lat</td>\n",
       "      <td>525385</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>long</td>\n",
       "      <td>525382</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>city</td>\n",
       "      <td>743907</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>country</td>\n",
       "      <td>528355</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>continent</td>\n",
       "      <td>528338</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>state</td>\n",
       "      <td>650473</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>state_code</td>\n",
       "      <td>670673</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  column  nullvalues\n",
       "0                  tweet          14\n",
       "1             created_at           0\n",
       "2                  likes          42\n",
       "3          retweet_count         154\n",
       "4                user_id         158\n",
       "5   user_followers_count         170\n",
       "6          user_location      295248\n",
       "7                    lat      525385\n",
       "8                   long      525382\n",
       "9                   city      743907\n",
       "10               country      528355\n",
       "11             continent      528338\n",
       "12                 state      650473\n",
       "13            state_code      670673"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "check_col_null_values(trump)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "def clean_data_frame(dataframe):\n",
    "    dataframe['likes'] = pd.to_numeric(dataframe['likes'], errors=\"coerce\")\n",
    "    dataframe['user_followers_count'] = pd.to_numeric(dataframe['user_followers_count'], errors=\"coerce\")\n",
    "    dataframe[\"likes\"].fillna(dataframe[\"likes\"].mean(), inplace=True)\n",
    "    dataframe[\"retweet_count\"].fillna(dataframe[\"retweet_count\"].mean(), inplace=True)\n",
    "    #dataframe[\"user_followers_count\"].fillna(dataframe[\"user_followers_count\"].mean(), inplace=True) ??\n",
    "    dataframe['created_at'] = pd.to_datetime(dataframe['created_at'], errors=\"coerce\") \n",
    "    dataframe[\"created_at\"] = dataframe[\"created_at\"].dt.strftime('%m-%d')\n",
    "    print(dataframe.dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-16-e46804524b75>:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  dataframe['likes'] = pd.to_numeric(dataframe['likes'], errors=\"coerce\")\n",
      "<ipython-input-16-e46804524b75>:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  dataframe['user_followers_count'] = pd.to_numeric(dataframe['user_followers_count'], errors=\"coerce\")\n",
      "/Users/veena/opt/anaconda3/lib/python3.8/site-packages/pandas/core/series.py:4517: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().fillna(\n",
      "<ipython-input-16-e46804524b75>:7: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  dataframe['created_at'] = pd.to_datetime(dataframe['created_at'], errors=\"coerce\")\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tweet                    object\n",
      "created_at               object\n",
      "likes                   float64\n",
      "retweet_count           float64\n",
      "user_id                  object\n",
      "user_followers_count    float64\n",
      "user_location            object\n",
      "lat                      object\n",
      "long                     object\n",
      "city                     object\n",
      "country                  object\n",
      "continent                object\n",
      "state                    object\n",
      "state_code               object\n",
      "dtype: object\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-16-e46804524b75>:8: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  dataframe[\"created_at\"] = dataframe[\"created_at\"].dt.strftime('%m-%d')\n"
     ]
    }
   ],
   "source": [
    "clean_data_frame(trump)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tweet: null percent: 0.0 null values: 0/971073 value count: 971073/971073\n",
      "created_at: null percent: 0.015858745943919766 null values: 154/971073 value count: 970919/971073\n",
      "likes: null percent: 0.0 null values: 0/971073 value count: 971073/971073\n",
      "retweet_count: null percent: 0.0 null values: 0/971073 value count: 971073/971073\n",
      "user_id: null percent: 0.014828957246262639 null values: 144/971073 value count: 970929/971073\n",
      "user_followers_count: null percent: 0.031202597539010973 null values: 303/971073 value count: 970770/971073\n",
      "user_location: null percent: 30.402863636410444 null values: 295234/971073 value count: 675839/971073\n",
      "lat: null percent: 54.10211178768228 null values: 525371/971073 value count: 445702/971073\n",
      "long: null percent: 54.10180285107299 null values: 525368/971073 value count: 445705/971073\n",
      "city: null percent: 76.60526036662537 null values: 743893/971073 value count: 227180/971073\n",
      "country: null percent: 54.40795903088645 null values: 528341/971073 value count: 442732/971073\n",
      "continent: null percent: 54.40620839010043 null values: 528324/971073 value count: 442749/971073\n",
      "state: null percent: 66.98353264893576 null values: 650459/971073 value count: 320614/971073\n",
      "state_code: null percent: 69.06370581820316 null values: 670659/971073 value count: 300414/971073\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>column</th>\n",
       "      <th>nullvalues</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tweet</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>created_at</td>\n",
       "      <td>154</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>likes</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>retweet_count</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>user_id</td>\n",
       "      <td>144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>user_followers_count</td>\n",
       "      <td>303</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>user_location</td>\n",
       "      <td>295234</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>lat</td>\n",
       "      <td>525371</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>long</td>\n",
       "      <td>525368</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>city</td>\n",
       "      <td>743893</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>country</td>\n",
       "      <td>528341</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>continent</td>\n",
       "      <td>528324</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>state</td>\n",
       "      <td>650459</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>state_code</td>\n",
       "      <td>670659</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  column  nullvalues\n",
       "0                  tweet           0\n",
       "1             created_at         154\n",
       "2                  likes           0\n",
       "3          retweet_count           0\n",
       "4                user_id         144\n",
       "5   user_followers_count         303\n",
       "6          user_location      295234\n",
       "7                    lat      525371\n",
       "8                   long      525368\n",
       "9                   city      743893\n",
       "10               country      528341\n",
       "11             continent      528324\n",
       "12                 state      650459\n",
       "13            state_code      670659"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trump = trump.dropna(subset=['tweet'])\n",
    "check_col_null_values(trump)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "trump['tweet'] = trump['tweet'].apply(clean_tweet_text_regex)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['SPANISH', 'Unknown', 'ENGLISH', 'FRENCH', 'TURKISH', 'FINNISH',\n",
       "       'LATIN', 'ITALIAN', 'BOSNIAN', 'GERMAN', 'SCOTS', 'PORTUGUESE',\n",
       "       'INDONESIAN', 'CATALAN', 'BASQUE', 'DUTCH', 'BRETON', 'DANISH',\n",
       "       'KINYARWANDA', 'SWEDISH', 'POLISH', 'SERBIAN', 'CROATIAN',\n",
       "       'SLOVAK', 'NORWEGIAN', 'SWAHILI', 'AFRIKAANS', 'TSWANA',\n",
       "       'AZERBAIJANI', 'CZECH', 'MALAY', 'SOMALI', 'CORSICAN', 'OCCITAN',\n",
       "       'ALBANIAN', 'FRISIAN', 'LINGALA', 'NORWEGIAN_N', 'MANX', 'WOLOF',\n",
       "       'SCOTS_GAELIC', 'INTERLINGUE', 'HUNGARIAN', 'JAVANESE',\n",
       "       'RHAETO_ROMANCE', 'GALICIAN', 'RUNDI', 'IRISH', 'ROMANIAN',\n",
       "       'NAURU', 'X_PIG_LATIN', 'CEBUANO', 'GUARANI', 'ESPERANTO',\n",
       "       'BISLAMA', 'LUXEMBOURGISH', 'TAGALOG', 'AFAR', 'SANSKRIT',\n",
       "       'TURKMEN', 'HAUSA', 'SLOVENIAN', 'TATAR', 'UZBEK', 'SISWANT',\n",
       "       'INTERLINGUA', 'SHONA', 'X_KLINGON', 'XHOSA', 'HAITIAN_CREOLE',\n",
       "       'SESELWA', 'WELSH', 'OROMO', 'AYMARA', 'LITHUANIAN', 'GANDA',\n",
       "       'SESOTHO', 'YORUBA', 'WARAY_PHILIPPINES', 'NYANJA', 'ESTONIAN',\n",
       "       'VOLAPUK', 'MAURITIAN_CREOLE', 'KHASI', 'ICELANDIC', 'MAORI',\n",
       "       'QUECHUA', 'VENDA', 'LATVIAN', 'SUNDANESE', 'IGBO', 'ZULU',\n",
       "       'HAWAIIAN', 'VIETNAMESE', 'MALTESE', 'TSONGA', 'HMONG', 'ZHUANG',\n",
       "       'MALAGASY', 'FIJIAN', 'SAMOAN'], dtype=object)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trump['tweet'].apply(detect_lang).unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tweets cleaning started\n",
      "Tweets cleanned\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-21-b4a53f2d954b>:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  trump['tweet'] = clean_tweet_spacy(trump, 'tweet')\n"
     ]
    }
   ],
   "source": [
    "trump['langs'] = trump['tweet'].apply(detect_lang)\n",
    "\n",
    "trump_all_languages = trump\n",
    "trump = trump[trump['langs'] == \"ENGLISH\"]\n",
    "trump['tweet'] = clean_tweet_spacy(trump, 'tweet')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tweet: null percent: 0.010037666988815723 null values: 78/777073 value count: 776995/777073\n",
      "created_at: null percent: 0.0 null values: 0/777073 value count: 777073/777073\n",
      "likes: null percent: 0.020461398092585896 null values: 159/777073 value count: 776914/777073\n",
      "retweet_count: null percent: 0.022906470820630753 null values: 178/777073 value count: 776895/777073\n",
      "user_id: null percent: 0.023678599050539654 null values: 184/777073 value count: 776889/777073\n",
      "user_followers_count: null percent: 0.024193351203812254 null values: 188/777073 value count: 776885/777073\n",
      "user_location: null percent: 30.113901782715395 null values: 234007/777073 value count: 543066/777073\n",
      "lat: null percent: 54.279198994174294 null values: 421789/777073 value count: 355284/777073\n",
      "long: null percent: 54.279198994174294 null values: 421789/777073 value count: 355284/777073\n",
      "city: null percent: 75.95219496752557 null values: 590204/777073 value count: 186869/777073\n",
      "country: null percent: 54.47403268418797 null values: 423303/777073 value count: 353770/777073\n",
      "continent: null percent: 54.47171629949824 null values: 423285/777073 value count: 353788/777073\n",
      "state: null percent: 66.51653062196216 null values: 516882/777073 value count: 260191/777073\n",
      "state_code: null percent: 68.52251976326549 null values: 532470/777073 value count: 244603/777073\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>column</th>\n",
       "      <th>nullvalues</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tweet</td>\n",
       "      <td>78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>created_at</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>likes</td>\n",
       "      <td>159</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>retweet_count</td>\n",
       "      <td>178</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>user_id</td>\n",
       "      <td>184</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>user_followers_count</td>\n",
       "      <td>188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>user_location</td>\n",
       "      <td>234007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>lat</td>\n",
       "      <td>421789</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>long</td>\n",
       "      <td>421789</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>city</td>\n",
       "      <td>590204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>country</td>\n",
       "      <td>423303</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>continent</td>\n",
       "      <td>423285</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>state</td>\n",
       "      <td>516882</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>state_code</td>\n",
       "      <td>532470</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  column  nullvalues\n",
       "0                  tweet          78\n",
       "1             created_at           0\n",
       "2                  likes         159\n",
       "3          retweet_count         178\n",
       "4                user_id         184\n",
       "5   user_followers_count         188\n",
       "6          user_location      234007\n",
       "7                    lat      421789\n",
       "8                   long      421789\n",
       "9                   city      590204\n",
       "10               country      423303\n",
       "11             continent      423285\n",
       "12                 state      516882\n",
       "13            state_code      532470"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "biden = hashtagjoebiden[columns]\n",
    "check_col_null_values(biden)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-16-e46804524b75>:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  dataframe['likes'] = pd.to_numeric(dataframe['likes'], errors=\"coerce\")\n",
      "<ipython-input-16-e46804524b75>:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  dataframe['user_followers_count'] = pd.to_numeric(dataframe['user_followers_count'], errors=\"coerce\")\n",
      "/Users/veena/opt/anaconda3/lib/python3.8/site-packages/pandas/core/series.py:4517: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().fillna(\n",
      "<ipython-input-16-e46804524b75>:7: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  dataframe['created_at'] = pd.to_datetime(dataframe['created_at'], errors=\"coerce\")\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tweet                    object\n",
      "created_at               object\n",
      "likes                   float64\n",
      "retweet_count           float64\n",
      "user_id                  object\n",
      "user_followers_count    float64\n",
      "user_location            object\n",
      "lat                      object\n",
      "long                     object\n",
      "city                     object\n",
      "country                  object\n",
      "continent                object\n",
      "state                    object\n",
      "state_code               object\n",
      "dtype: object\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-16-e46804524b75>:8: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  dataframe[\"created_at\"] = dataframe[\"created_at\"].dt.strftime('%m-%d')\n"
     ]
    }
   ],
   "source": [
    "clean_data_frame(biden)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "biden = biden.dropna(subset=['tweet'])\n",
    "biden['tweet'] = biden['tweet'].apply(clean_tweet_text_regex)\n",
    "biden['langs'] = biden['tweet'].apply(detect_lang)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tweets cleaning started\n",
      "Tweets cleanned\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-25-0175e488d0a1>:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  biden['tweet'] = clean_tweet_spacy(biden, 'tweet')\n"
     ]
    }
   ],
   "source": [
    "biden_all_languages = biden\n",
    "\n",
    "biden = biden[biden['langs'] == 'ENGLISH']\n",
    "biden['tweet'] = clean_tweet_spacy(biden, 'tweet')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_tweets = pd.DataFrame(columns = ['date', 'trump tweet count', 'biden tweet count'])\n",
    "all_tweets['date'] = trump.groupby(\"created_at\").count().index\n",
    "all_tweets['trump tweet count'] = list(trump.groupby(\"created_at\").count().tweet)\n",
    "all_tweets['biden tweet count'] = list(biden.groupby(\"created_at\").count().tweet)\n",
    "\n",
    "all_tweets.set_index(\"date\", inplace=True)\n",
    "#trump.groupby(\"created_at\").sum(numeric_only=True)\n",
    "\n",
    "#biden.groupby(\"created_at\").sum(numeric_only=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'tweets #')"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(16,6))\n",
    "snb.lineplot(data=all_tweets)\n",
    "plt.title(\"Tweet Counts over Time\")\n",
    "plt.ylabel(\"tweets #\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'likes #')"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "all_tweets = pd.DataFrame(columns=['date', 'trump likes', 'biden likes'])\n",
    "all_tweets['date'] = trump.groupby(\"created_at\").count().index\n",
    "all_tweets['trump likes'] = list(trump.groupby(\"created_at\").sum(numeric_only=True).likes)\n",
    "all_tweets['biden likes'] = list(biden.groupby(\"created_at\").sum(numeric_only=True).likes)\n",
    "all_tweets.set_index(\"date\", inplace=True)\n",
    "\n",
    "plt.figure(figsize=(16, 6))\n",
    "snb.lineplot(data=all_tweets)\n",
    "plt.title(\"Tweet Likes over Time\")\n",
    "plt.ylabel(\"likes #\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'likes #')"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "all_tweets = pd.DataFrame(columns=['date', 'trump retweets', 'biden retweets'])\n",
    "all_tweets['date'] = trump.groupby(\"created_at\").count().index\n",
    "all_tweets['trump retweets'] = list(trump.groupby(\"created_at\").sum(numeric_only=True).retweet_count)\n",
    "all_tweets['biden retweets'] = list(biden.groupby(\"created_at\").sum(numeric_only=True).retweet_count)\n",
    "all_tweets.set_index(\"date\", inplace=True)\n",
    "\n",
    "plt.figure(figsize=(16, 6))\n",
    "snb.lineplot(data=all_tweets)\n",
    "plt.title(\"Tweet Retweets over Time\")\n",
    "plt.ylabel(\"likes #\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-33-91949abca8d0>:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  trump['hashtag'] = 'trump'\n",
      "<ipython-input-33-91949abca8d0>:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  biden['hashtag'] = 'biden'\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet</th>\n",
       "      <th>created_at</th>\n",
       "      <th>likes</th>\n",
       "      <th>retweet_count</th>\n",
       "      <th>user_id</th>\n",
       "      <th>user_followers_count</th>\n",
       "      <th>user_location</th>\n",
       "      <th>lat</th>\n",
       "      <th>long</th>\n",
       "      <th>city</th>\n",
       "      <th>country</th>\n",
       "      <th>continent</th>\n",
       "      <th>state</th>\n",
       "      <th>state_code</th>\n",
       "      <th>langs</th>\n",
       "      <th>hashtag</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>trump student hear year year hear china 2019 1...</td>\n",
       "      <td>10-15</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>8436472.0</td>\n",
       "      <td>1185.0</td>\n",
       "      <td>Portland</td>\n",
       "      <td>45.5202471</td>\n",
       "      <td>-122.6741949</td>\n",
       "      <td>Portland</td>\n",
       "      <td>United States of America</td>\n",
       "      <td>North America</td>\n",
       "      <td>Oregon</td>\n",
       "      <td>OR</td>\n",
       "      <td>ENGLISH</td>\n",
       "      <td>trump</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2 hour tweet trump maybe busy tremendously busy</td>\n",
       "      <td>10-15</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8.28355589206057e+17</td>\n",
       "      <td>32.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>ENGLISH</td>\n",
       "      <td>trump</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>tie tie trump s rally iowa</td>\n",
       "      <td>10-15</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>47413798.0</td>\n",
       "      <td>5393.0</td>\n",
       "      <td>Washington DC</td>\n",
       "      <td>38.8949924</td>\n",
       "      <td>-77.0365581</td>\n",
       "      <td>Washington</td>\n",
       "      <td>United States of America</td>\n",
       "      <td>North America</td>\n",
       "      <td>District of Columbia</td>\n",
       "      <td>DC</td>\n",
       "      <td>ENGLISH</td>\n",
       "      <td>trump</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>15 minute long time ago omarosa represent bl...</td>\n",
       "      <td>10-15</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1138416104.0</td>\n",
       "      <td>2363.0</td>\n",
       "      <td>Perris,California</td>\n",
       "      <td>33.7825194</td>\n",
       "      <td>-117.22864779999999</td>\n",
       "      <td>NaN</td>\n",
       "      <td>United States of America</td>\n",
       "      <td>North America</td>\n",
       "      <td>California</td>\n",
       "      <td>CA</td>\n",
       "      <td>ENGLISH</td>\n",
       "      <td>trump</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>glad u get house dicktrump 2020</td>\n",
       "      <td>10-15</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.674018410302095e+17</td>\n",
       "      <td>75.0</td>\n",
       "      <td>Powell, TN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>ENGLISH</td>\n",
       "      <td>trump</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                               tweet created_at  likes  \\\n",
       "2  trump student hear year year hear china 2019 1...      10-15    2.0   \n",
       "3    2 hour tweet trump maybe busy tremendously busy      10-15    0.0   \n",
       "4                       tie tie trump s rally iowa        10-15    4.0   \n",
       "5    15 minute long time ago omarosa represent bl...      10-15    2.0   \n",
       "6                    glad u get house dicktrump 2020      10-15    0.0   \n",
       "\n",
       "   retweet_count                user_id  user_followers_count  \\\n",
       "2            1.0              8436472.0                1185.0   \n",
       "3            0.0   8.28355589206057e+17                  32.0   \n",
       "4            3.0             47413798.0                5393.0   \n",
       "5            0.0           1138416104.0                2363.0   \n",
       "6            0.0  7.674018410302095e+17                  75.0   \n",
       "\n",
       "       user_location         lat                 long        city  \\\n",
       "2           Portland  45.5202471         -122.6741949    Portland   \n",
       "3                NaN         NaN                  NaN         NaN   \n",
       "4      Washington DC  38.8949924          -77.0365581  Washington   \n",
       "5  Perris,California  33.7825194  -117.22864779999999         NaN   \n",
       "6         Powell, TN         NaN                  NaN         NaN   \n",
       "\n",
       "                    country      continent                 state state_code  \\\n",
       "2  United States of America  North America                Oregon         OR   \n",
       "3                       NaN            NaN                   NaN        NaN   \n",
       "4  United States of America  North America  District of Columbia         DC   \n",
       "5  United States of America  North America            California         CA   \n",
       "6                       NaN            NaN                   NaN        NaN   \n",
       "\n",
       "     langs hashtag  \n",
       "2  ENGLISH   trump  \n",
       "3  ENGLISH   trump  \n",
       "4  ENGLISH   trump  \n",
       "5  ENGLISH   trump  \n",
       "6  ENGLISH   trump  "
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trump['hashtag'] = 'trump'\n",
    "biden['hashtag'] = 'biden'\n",
    "df = pd.concat([trump, biden])\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tweepy"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
